------------------1. INTRO TO REACT APP ------------------

1) npx  --> Node Package Executor

2) npx create-react-app <app-name>   -->  This is the way to create a react app.

3) npm run start  --> It is used to start the app

4) npm run build  --> It is for the deployment of the app in the production. It creates a build folder which includes all the js, css files and many more, this is the folder that is actually served to the user for using not the actuial source folder.


5) Creating a react app thorugh vite
--> 
    (i) npm create vite@latest  --> Using NPM's create utility to create a new vite project that is latest.

    (ii) Choose "react"

    (iii) Choose "JavaScript"

    NOTE: Now you will see that the 01vitereact project does not have the node_modules folder.

    (iv) So you need to move to the project directory and install the npm (npm install) which install all the required modules.


------ 2. Understanding the React flow and structure -----------


(A) 01basicreact

    1) Main Entry point: "01basicreact\src\index.js"


    2) Understanding "01basicreact\src\index.js":


    React and ReactDOM   -->  2 libraries that are being imported to manipulate the DOM of Web 

    React -> Core Foundational Library
    ReactDOM -> This is the implemention of React on Web

    NOTE: React creats its own DOM known as "Virtual DOM"


    Refer to the files itself for better understanding

    3) If you notice that there is no js file injected in 01basicreact\public\index.html but still it is rendering with the help of index.js  --->  "react-scripts": "5.0.1" from 01basicreact\package.json does this all


(B) 02vitereact

    1) .jsx file allows you to send a single element. So better use fragment 
    <>
    // More elements inside fragment enclosure
    </>

    2) the function name in .jsx file should always start with a caps letter (strict rule otherwise error)

    3) Created a myfile.jsx which will render another html which is exported to App.jsx inside the App()

    NOTE: Doing the same for 01basicreact

NOTE: For any case either react app through vite or not you should start the name of the react components with caps letter. Do it with the folder name also (good/ideal practice)



---------- 3. Creating Own react library and jsx -----------

1) When we send a html element this is how the element looks like after the react parses that element

// Note the actual one just a sample
const reactElement = {
    type: "a",
    props:{
        href: "https://google.com",
        target: "_blank"
    },
    children: "Visit Google.com"
}

2 ) we can create React element using React.createElement() method which has  special syntax for taking parameters attributes or properties of the element

Example:

const react_element = React.createElement(

    // 1st Parameter - Tags (Type of element to be created)
    "a",

    // 2nd Parameter - Object (All the attributes of the element)
    {
        href: "https://google.com",
        target: "_blank"
    },

    // 3rd Parameter - Text
    "Click me to visit Google"
)



3) This is how we send variables inside a html tag in a .jsx file:   {variable_name}

Note : {username} it is an evaluated expression which means that you can only use expressions that are already evaluated. You can evaluate within this expression like this :
{if (true) username}




---------- 3. Hooks in Reacts -----------

React Hooks are functions that allow you to use state and other React features in functional components. Introduced in React 16.8, they enable you to manage component state and lifecycle without needing to write class components.

let [<state>, <setState>] = useState(<initial_value>);



---------- 3. Fibres, Virtual DOM, Reconciliation in Reacts -----------

The Virtual DOM is a key concept in React that helps improve the efficiency and performance of web applications.

What is the Virtual DOM?

The Virtual DOM (VDOM) is an in-memory representation of the actual DOM elements. Instead of directly manipulating the browser's DOM, which can be slow, React creates a virtual copy of the DOM. This virtual DOM is a lightweight JavaScript object that mirrors the structure of the real DOM.

 How Does the Virtual DOM Work?

1. Initial Render:
   - When a React component is first rendered, React creates a virtual DOM tree that mirrors the structure of the real DOM.
   - This tree is stored in memory and used to calculate the changes needed when the component's state or props are updated.

2. State or Props Change:
   - When a component's state or props change, React re-renders the virtual DOM tree.
   - Instead of updating the real DOM immediately, React first updates the virtual DOM.

3. Diffing Algorithm:
   - React compares the new virtual DOM tree with the previous one using a process called "reconciliation."
   - It calculates the minimal set of changes (or "diff") that need to be made to the real DOM to match the new virtual DOM.

4. Batch Updates:
   - React then batches these changes and applies them to the real DOM in the most efficient way possible.
   - This minimizes the number of direct DOM manipulations, making updates faster and reducing the likelihood of performance bottlenecks.

 Benefits of the Virtual DOM

1. Performance:
   - Direct manipulation of the DOM is slow and can cause performance issues, especially with large, complex UIs.
   - The Virtual DOM optimizes updates, ensuring that only the necessary changes are made.

2. Abstraction:
   - The Virtual DOM abstracts away the complexities of the browser's DOM API, providing a simpler interface for developers to work with.

3. Predictability:
   - Since the virtual DOM is a pure JavaScript object, it can be tested and manipulated in a predictable way, leading to more reliable and maintainable code.

4. Optimized Rendering:
   - React's reconciliation process ensures that updates are only made when necessary, reducing unnecessary re-renders and improving overall performance.

 Example

Consider a scenario where you have a list of items rendered by a React component. If you add a new item to the list, React will:

1. Create a new virtual DOM tree with the updated list.
2. Compare this new tree with the previous one.
3. Identify that only one new item was added.
4. Efficiently update the real DOM to include just that new item, instead of re-rendering the entire list.

This process makes React highly performant, even in applications with frequent and complex UI updates.





---------- 4. Tailwind Css and Props  -----------

1) npm install -D tailwindcss postcss autoprefixer     ----->     This will install tailwindcss and its peer dependencies, then generate your tailwind.config.js and postcss.config.js files.

2) npx tailwindcss init -p   -----> It will create 2 files "tailwind.config.js" and "postcss.config.js"